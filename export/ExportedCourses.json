{"courses":[{"difficulty":1,"name":"Challenges","needsPrevCourse":false,"levels":[{"loc":-1,"knights":0,"maxKnights":1,"code":[],"requiredLevels":[12],"turnsToStars":[28,26],"reruns":1,"name":"Collect And Drop","id":13,"map":[["wall","wall","wall","wall","wall"],["wall","path",{"linkedIds":[0],"content":"gate"},"exit","wall"],["wall","path","wall","wall","wall"],["wall",{"item":"boulder","id":0,"content":"pressure_plate"},"wall","empty","empty"],["wall",{"item":"key","content":"path"},"wall","empty","empty"],["wall","spawn","wall","empty","empty"],["wall","wall","wall","empty","empty"]],"locToStars":[30,26],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"requiredLevels":[12],"turnsToStars":[105,99],"reruns":1,"name":"Looping Around","id":14,"map":[["empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","wall","wall","wall","wall"],["empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","wall","exit","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path","path","path","wall"],["wall","path","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path","path","path","wall"],["wall","path","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path","path","path","wall"],["wall","path","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path",{"item":"key","content":"path"},"spawn","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[19,16],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["Skeleton skelly = new Skeleton(EAST,3);","Skeleton skelvin = new Skeleton(WEST,4);","Army skellies = new Army(skelly,skelvin);","while(skelly.isAlive() || (skelvin.isAlive())) {","boolean aggro1 = skelly.targetsEntity(KNIGHT);","boolean aggro2 = skelvin.targetsEntity(KNIGHT);","if (aggro1 || aggro2) {","skellies.attack();","}","else if (skellies.canMove()) {","skellies.move();","}","else {","if (!(skelly.canMove())) {","skelly.turn(AROUND);","}","if (!(skelvin.canMove())) {","skelvin.turn(AROUND);","}","}","}"],"turns":-1,"requiredLevels":[14],"turnsToStars":[60,54],"reruns":1,"name":"Not About Timing","id":15,"map":[["empty","empty","empty","empty","empty","empty","empty","wall","wall","wall"],["empty","empty","empty","empty","empty","empty","empty","wall",{"id":1,"content":"pressure_plate"},"wall"],["wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","exit",{"id":3,"content":"enemy_spawn"},"path","path","path",{"linkedIds":[1],"content":"path"},{"linkedIds":[1],"flags":["inverted"],"content":"gate"},{"linkedIds":[2],"content":"path"},"wall"],["wall","wall","wall","wall","wall","wall","wall","wall",{"linkedIds":[2],"flags":["turned"],"content":"gate"},"wall"],["wall","path","path","path",{"item":"key","content":"path"},"path","path","path","path","wall"],["wall","path","wall","path",{"id":4,"content":"enemy_spawn"},"path","path","path",{"id":2,"content":"pressure_plate"},"wall"],["wall","path","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","trap","path",{"flags":["preparing"],"content":"trap"},"path","path","spawn","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[43,33]},{"loc":-1,"knights":0,"maxKnights":2,"code":[],"turnsToStars":[24,22],"reruns":2,"ai":["int i = randInt(1,2);","Skeleton skelly = new Skeleton(WEST,i);","skelly.dropItem();"],"name":"Coordination Training","id":25,"map":[["wall","wall","wall","wall","wall","wall","wall"],["wall",{"item":"sword","content":"spawn"},"path",{"item":"boulder","id":1,"content":"enemy_spawn"},{"id":3,"content":"pressure_plate"},{"id":0,"content":"pressure_plate"},"wall"],["wall","path","path","path","wall","wall","wall"],["wall","path",{"item":"key","content":"path"},{"id":2,"content":"enemy_spawn"},{"linkedIds":[0,3],"content":"gate"},"exit","wall"],["wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[40,35],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["Skeleton skelly = new Skeleton(EAST);","int turns = 2;","boolean danger = false;","while(skelly.isAlive()) {","if (skelly.targetsCell(TRAP) && (skelly.canMove())) {","danger = true;","}","if (skelly.targetsDanger()) {","skelly.wait();","}","else if (skelly.canMove()) {","skelly.move();","}","else if (danger) {","skelly.backOff();","skelly.turn(LEFT);","turns = turns + 1;","danger = false;","}","else if (skelly.targetsItem(KEY)) {","skelly.collect();","}","else if (turns < 5) {","skelly.turn(LEFT);","turns = turns + 1;","danger = false;","}","else {","skelly.turn(RIGHT);","turns = 0;","danger = false;","}","}"],"turns":-1,"requiredLevels":[15],"turnsToStars":[48,42],"reruns":1,"name":"Danger Traps Evolved","id":16,"map":[["wall","wall","wall","wall","wall","wall","wall"],["wall","spawn","path","trap","path","path","wall"],["wall","wall","wall","wall","wall","path","wall"],["wall","path",{"flags":["armed"],"content":"trap"},"path",{"flags":["preparing"],"content":"trap"},"path","wall"],["wall","path","path","wall","wall","wall","wall"],["wall",{"item":"boulder","content":"trap"},"path","path","path","path","wall"],["wall","path","path","exit","wall","path","wall"],["wall","path","wall","wall","wall","path","wall"],["wall","enemy_spawn","path","path","path",{"item":"key","content":"path"},"wall"],["wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[36,32]},{"loc":-1,"knights":0,"maxKnights":2,"code":[],"requiredLevels":[13],"turnsToStars":[17,15],"reruns":1,"name":"The Sacrifice","id":17,"map":[["wall","wall","wall","wall","wall","wall"],["wall","spawn",{"linkedIds":[0,1],"flags":["inverted"],"content":"gate"},{"flags":["inverted"],"id":1,"content":"pressure_plate"},{"item":"boulder","flags":["inverted"],"id":0,"content":"pressure_plate"},"wall"],["wall",{"linkedIds":[0,1],"flags":["turned"],"content":"gate"},"wall","wall","wall","wall"],["wall","path",{"item":"key","id":2,"content":"pressure_plate"},"wall","empty","empty"],["wall",{"linkedIds":[2],"flags":["turned"],"content":"gate"},"wall","wall","empty","empty"],["wall","exit","wall","empty","empty","empty"],["wall","wall","wall",{"linkedIds":[0],"content":"empty"},"empty",{"linkedIds":[1],"content":"empty"}]],"locToStars":[17,15],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["Skeleton skelly = new Skeleton(NORTH,10);","Skeleton skelvin = new Skeleton(NORTH,11);","Skeleton skeletor = new Skeleton(NORTH,12);","int r1 = randInt(1,3);","int r2 = randInt(1,3);","int r3 = randInt(1,3);","for(int i = 0;i < r1;i = i + 1) {","skelly.move();","}","for(int i = 0;i < r2;i = i + 1) {","skelvin.move();","}","for(int i = 0;i < r3;i = i + 1) {","skeletor.move();","}"],"turns":-1,"requiredLevels":[16],"turnsToStars":[57,51],"reruns":3,"name":"Randomized Laboratory","id":18,"map":[["empty","empty","wall","wall","wall","wall","wall","wall","wall","wall","wall","empty","empty"],["empty","empty","wall",{"id":7,"content":"pressure_plate"},"wall","wall",{"id":4,"content":"pressure_plate"},"wall","wall",{"id":1,"content":"pressure_plate"},"wall","empty","empty"],["empty","empty","wall",{"id":8,"content":"pressure_plate"},"wall","wall",{"id":5,"content":"pressure_plate"},"wall","wall",{"id":2,"content":"pressure_plate"},"wall","empty","empty"],["wall","wall","wall",{"id":9,"content":"pressure_plate"},"wall","wall",{"id":6,"content":"pressure_plate"},"wall","wall",{"id":3,"content":"pressure_plate"},"wall","empty","empty"],["wall","exit","wall",{"id":12,"content":"enemy_spawn"},"wall","wall",{"id":11,"content":"enemy_spawn"},"wall","wall",{"id":10,"content":"enemy_spawn"},"wall","empty","empty"],["wall",{"item":"key","content":"path"},"wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","empty"],["wall","path",{"linkedIds":[7],"content":"gate"},"trap","path",{"linkedIds":[4],"content":"gate"},"trap","path",{"linkedIds":[1],"content":"gate"},"trap","path","wall","wall"],["wall","path",{"linkedIds":[8],"content":"gate"},"trap","path",{"linkedIds":[5],"content":"gate"},"trap","path",{"linkedIds":[2],"content":"gate"},"trap","path","spawn","wall"],["wall","path",{"linkedIds":[9],"content":"gate"},"trap","path",{"linkedIds":[6],"content":"gate"},"trap","path",{"linkedIds":[3],"content":"gate"},"trap","path","wall","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","empty"]],"locToStars":[36,32]},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["Skeleton skelly = new Skeleton(SOUTH,6);","Skeleton skelvin = new Skeleton(NORTH,5);","Army a = new Army(skelly,skelvin);","while(skelly.isAlive() || (skelvin.isAlive())) {","boolean playerTargeted = !a.targetsEntity(NONE);","if (a.canMove()) {","a.move();","}","else if (playerTargeted) {","a.attack();","}","else {","a.turn(LEFT);","}","}"],"turns":-1,"requiredLevels":[15],"turnsToStars":[64,59],"reruns":1,"name":"Waste Press","id":19,"map":[["wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","path","path","path","path","wall"],["wall","path","wall","wall","wall",{"linkedIds":[3,4,0,2,7],"flags":["turned"],"content":"gate"},"wall","path","wall"],["wall","exit","wall","wall","wall",{"linkedIds":[2,0,3,4,7],"flags":["turned"],"content":"gate"},"wall",{"item":"key","content":"path"},"wall"],["wall","wall","wall","wall","wall",{"linkedIds":[2,0,4,3,7],"flags":["turned"],"content":"gate"},"wall","wall","wall"],["wall",{"id":6,"content":"enemy_spawn"},"wall","wall","wall",{"linkedIds":[3,2,4,0,7],"flags":["turned"],"content":"gate"},"wall","wall","wall"],["wall","path",{"flags":["inverted"],"id":3,"content":"pressure_plate"},"path","path","path",{"flags":["inverted"],"id":4,"content":"pressure_plate"},"path","wall"],["wall",{"flags":["inverted"],"id":7,"content":"pressure_plate"},"wall","wall","wall","wall","wall",{"linkedIds":[1],"flags":["inverted","turned"],"content":"gate"},"wall"],["wall","path",{"flags":["inverted"],"id":2,"content":"pressure_plate"},"path","path","path",{"flags":["inverted"],"id":0,"content":"pressure_plate"},{"linkedIds":[1],"content":"path"},"wall"],["wall","wall","wall","wall","path","wall","wall",{"id":5,"content":"enemy_spawn"},"wall"],["empty","empty","empty","wall",{"id":1,"content":"pressure_plate"},"wall","wall","wall","wall"],["empty","empty","empty","wall","path","wall","empty","empty","empty"],["wall","wall","wall","wall","path","wall","empty","empty","empty"],["wall","spawn","path","path","path","wall","empty","empty","empty"],["wall","wall","wall","wall","wall","wall","empty","empty","empty"]],"locToStars":[60,43]},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["Skeleton skelly = new Skeleton(WEST);","int turns = 0;","while(skelly.isAlive()) {","if (skelly.canMove()) {","skelly.move();","}","else if (skelly.targetsEntity(KNIGHT)) {","skelly.attack();","}","else if (skelly.targetsItem(KEY)) {","skelly.collect();","skelly.move();","skelly.move();","skelly.turn(RIGHT);","}","else if (turns == 4) {","skelly.turn(RIGHT);","turns = turns + 1;","}","else {","skelly.turn(LEFT);","turns = turns + 1;","}","}"],"turns":-1,"requiredLevels":[19],"turnsToStars":[60,53],"reruns":1,"name":"Key Thief","id":20,"map":[["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","enemy_spawn","wall","exit","wall","path","path","path","wall"],["wall","path","wall","wall","wall","wall","path","wall","path","wall","path","wall"],["wall","path","path",{"item":"key","content":"path"},"path","wall","path","path","path","path","path","wall"],["wall","wall","wall","wall","path","wall","path","path","wall","wall","wall","wall"],["wall","path","path","path","path","path","path","path","wall","wall","wall","wall"],["wall","path","wall","wall","wall","wall","wall","wall","wall",{"item":"sword","content":"path"},"path","wall"],["wall","path","wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","path","path","path","trap","path","trap","path","path","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","spawn","path","path","path","path","path","path","path","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[38,33]},{"loc":-1,"knights":0,"maxKnights":3,"code":[],"ai":["Skeleton skelly = new Skeleton(WEST);","int turns = 0;","while(skelly.isAlive()) {","if (skelly.canMove()) {","skelly.move();","}","else if (skelly.targetsEntity() || (skelly.targetsItem())) {","skelly.attack();","}","else if (turns > 1 && (turns < 5)) {","skelly.turn(RIGHT);","turns = turns + 1;","}","else {","skelly.turn(LEFT);","turns = turns + 1;","}","}"],"turns":-1,"requiredLevels":[20],"turnsToStars":[40,38],"reruns":1,"name":"The Three Brothers","id":21,"map":[["wall","wall","wall","wall","wall","wall","wall","wall","wall","empty","empty","empty","empty","empty","empty"],["wall","path","enemy_spawn","wall","exit","path","path","path","wall","empty","empty","empty","empty","empty","empty"],["wall","path","wall","wall","wall","wall","wall",{"linkedIds":[1],"content":"path"},"wall","empty","empty","empty","empty","empty","empty"],["wall","path","path","path","path","path","wall","path","wall","empty","empty","empty","empty","empty","empty"],["wall","wall","wall","wall","wall","path","wall",{"linkedIds":[1,2],"flags":["turned"],"content":"gate"},"wall","wall","wall","wall","wall","wall","wall"],["wall",{"id":1,"content":"pressure_plate"},"path","path","wall","path","wall","path",{"linkedIds":[2],"content":"gate"},{"item":"key","id":2,"content":"pressure_plate"},"path","path","path","path","wall"],["wall",{"linkedIds":[1],"content":"path"},"wall","path","wall","path","wall","path","wall","wall","wall","wall","wall","path","wall"],["wall","path","wall","path","wall","path","wall","path","wall","empty","empty","empty","wall","path","wall"],["wall","path","wall","path","wall","path","wall","path","wall","empty","empty","empty","wall","path","wall"],["wall","path","wall","path","wall","path","wall","path","wall","empty","empty","empty","wall","path","wall"],["wall","path","wall","path","wall","path","wall","path","wall","empty","empty","empty","wall","path","wall"],["wall","path","wall","path","path","path","wall","path","wall","empty","empty","empty","wall","path","wall"],["wall","path","wall","wall","wall","wall","wall","path","wall","wall","wall","wall","wall","path","wall"],["wall","path","path","path","path","path","path","spawn","path","path","path","path","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[40,35]},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["boolean swapped = false;","int ran = randInt(1,2);","TurnDirection tDir = LEFT;","Direction dir = WEST;","if (ran == 2) {","tDir = RIGHT;","dir = EAST;","swapped = true;","}","Skeleton sk = new Skeleton(dir);","while(true) {","while(sk.isAlive()) {","if (sk.canMove()) {","sk.move();","}","else if (sk.targetsEntity()) {","sk.attack();","}","else if (sk.targetsItem() && (!(sk.hasItem()))) {","sk.collect();","}","else if (sk.targetsItem()) {","sk.collect();","sk.turn(AROUND);","sk.dropItem();","sk.turn(AROUND);","}","else {","sk.turn(tDir);","}","}","swapped = !swapped;","tDir = LEFT;","dir = WEST;","if (swapped) {","tDir = RIGHT;","dir = EAST;","}","sk = new Skeleton(dir);","}"],"turns":-1,"requiredLevels":[17],"turnsToStars":[38,36],"reruns":2,"name":"The Revenant","id":23,"map":[["wall","wall","wall","wall","wall","wall","wall","wall","empty","empty","empty","empty"],["wall","path","enemy_spawn",{"item":"key","content":"path"},"path","path","path","wall","empty","empty","empty","empty"],["wall","path","wall","wall","wall","wall","path","wall","wall","wall","wall","wall"],["wall","path","wall",{"item":"sword","content":"path"},"spawn","path","path",{"linkedIds":[3,4],"flags":["inverted"],"content":"gate"},{"linkedIds":[2],"content":"gate"},{"linkedIds":[3,4],"flags":["inverted"],"content":"gate"},"exit","wall"],["wall","path","wall","path","path","wall","path","wall","wall","wall","wall","wall"],["wall","path",{"flags":["inverted"],"id":3,"content":"pressure_plate"},{"item":"boulder","id":2,"content":"pressure_plate"},{"flags":["inverted"],"id":4,"content":"pressure_plate"},"path","path","wall","empty","empty","empty","empty"],["wall","wall","wall","wall","wall","wall","wall","wall","empty","empty","empty","empty"]],"locToStars":[48,39]},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"turnsToStars":[28,26],"reruns":3,"ai":["int i = randInt(1,3);","Skeleton skelly = new Skeleton(EAST,1);","Skeleton skelvin = new Skeleton(EAST,2);","Skeleton skeletor = new Skeleton(EAST,3);","if (i == 1) {","skelvin.collect();","skelvin.turn(AROUND);","skelvin.collect();","skeletor.turn(AROUND);","skeletor.collect();","}","else if (i == 2) {","skelly.turn(AROUND);","skelly.collect();","skeletor.collect();","skeletor.turn(AROUND);","skeletor.collect();","}","else {","skelly.collect();","skelly.turn(AROUND);","skelly.collect();","skelvin.turn(AROUND);","skelvin.collect();","}"],"name":"Confused Skeletons","id":26,"map":[["empty","empty","wall","wall","wall","wall","empty","empty"],["empty","empty","wall","path","spawn","wall","empty","empty"],["empty","empty","wall","path","wall","wall","wall","wall"],["empty","empty","wall","path",{"item":"boulder","content":"path"},{"item":"shovel","id":1,"content":"enemy_spawn"},{"item":"key","content":"path"},"wall"],["wall","wall","wall","path","wall","wall","wall","wall"],["wall","exit","dirt","path",{"item":"boulder","content":"path"},{"item":"shovel","id":2,"content":"enemy_spawn"},{"item":"key","content":"path"},"wall"],["wall","wall","wall","path","wall","wall","wall","wall"],["empty","empty","wall","path",{"item":"boulder","content":"path"},{"item":"shovel","id":3,"content":"enemy_spawn"},{"item":"key","content":"path"},"wall"],["empty","empty","wall","wall","wall","wall","wall","wall"]],"locToStars":[54,48],"turns":-1},{"loc":-1,"knights":0,"maxKnights":2,"code":[],"turnsToStars":[49,47],"reruns":1,"ai":["Skeleton skelly = new Skeleton(NORTH,2);","Skeleton skelvin = new Skeleton(EAST,3);","Army skells = new Army(skelly,skelvin);","TurnDirection dir = RIGHT;","int turns = 0;","while(skelly.isAlive() || (skelvin.isAlive())) {","boolean bItem = !skells.targetsItem(NONE);","boolean b = !skells.targetsEntity(NONE);","if (skells.canMove()) {","skells.move();","}","else if (b || bItem) {","skells.attack();","}","else {","if (!(skelly.canMove())) {","skelly.turn(dir);","turns = turns + 1;","}","if (skelvin.isAlive() && (!(skelvin.canMove()))) {","skelvin.turn(dir);","}","}","if (turns > 1 && (turns < 4)) {","dir = LEFT;","}","else {","dir = RIGHT;","}","}"],"name":"The Final Stand","id":12,"map":[["wall","wall","wall","wall","wall","empty","empty","empty","empty","empty","wall","wall","wall","wall","wall"],["wall","path","path","path","wall","empty","empty","empty","empty","empty","wall","wall",{"id":3,"content":"enemy_spawn"},"path","wall"],["wall","path","wall","path","wall","wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","path","wall","path","path","path","path","path","path","path","path","path","path","path","wall"],["wall","path","wall","path","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall",{"item":"sword","content":"path"},"wall","path","wall","path","path","path","wall","path","path","path","wall",{"id":1,"content":"pressure_plate"},"wall"],["wall","path","wall","path","wall",{"id":2,"content":"enemy_spawn"},"wall","path","wall","path","wall","path","wall","dirt","wall"],["wall","path","wall","path","wall","wall","wall","path","wall","path","wall","path","wall","dirt","wall"],["wall","path","wall","path","wall","wall","wall","path","wall","path","wall","path","wall","dirt","wall"],["wall",{"id":0,"content":"pressure_plate"},"wall","path","wall","wall","wall","path","path","path","wall","path","wall","dirt","wall"],["wall","path","wall","path","wall","exit","wall","wall","wall","wall","wall","path","wall","dirt","wall"],["wall","path","wall",{"item":"key","content":"path"},{"linkedIds":[1],"content":"path"},"path",{"linkedIds":[1],"content":"path"},"path",{"linkedIds":[1],"flags":["inverted"],"content":"gate"},"path","path","path","wall","dirt","wall"],["wall","path","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","dirt","wall"],["wall","spawn","path","path","path",{"linkedIds":[0],"content":"gate"},"path","path","path",{"item":"shovel","content":"path"},"path","path","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[38,35],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"turnsToStars":[48,43],"reruns":1,"ai":["Skeleton skelly = new Skeleton(EAST);","int turns = 2;","while(skelly.isAlive()) {","if (skelly.canMove()) {","skelly.move();","}","else if (skelly.targetsItem(KEY)) {","skelly.collect();","}","else if (turns < 5) {","skelly.turn(LEFT);","turns = turns + 1;","}","else {","skelly.turn(RIGHT);","turns = 0;","}","}"],"name":"Danger Traps","id":11,"map":[["wall","wall","wall","wall","wall","wall","wall"],["wall","spawn","path","trap","path","path","wall"],["wall","wall","wall","wall","wall","path","wall"],["wall","path",{"flags":["armed"],"content":"trap"},"path",{"flags":["preparing"],"content":"trap"},"path","wall"],["wall","path","path","wall","wall","wall","wall"],["wall",{"item":"boulder","content":"trap"},"path","path","path","path","wall"],["wall","path","path","exit","wall","path","wall"],["wall","path","wall","wall","wall","path","wall"],["wall","enemy_spawn","path","path","path",{"item":"key","content":"path"},"wall"],["wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[35,29],"turns":-1}]},{"difficulty":0,"name":"Basics 01","needsPrevCourse":false,"levels":[{"loc":-1,"knights":0,"maxKnights":1,"code":[],"turnsToStars":[5,4],"reruns":1,"name":"Hello Dungeon","id":0,"tutorialEntries":["Now we want to write our first Magic Script!","We first must summon a Knight. For that write: \"Knight lancelot = new Knight();\"\nThis expression is called a Constructor!","This will spawn a Knight named \"lancelot\" who will obey your commands. To give him a different name just replace \"lancelot\" with whatever you like.","Test the code by pressing the Execute Button with the big triangle on it. And then press the Reset Button with the circling arrow on it.\nYou can hide this message and myself by pressing the \"Hide Wizard\" button!","In order to escape, your Knight must first collect the KEY and then open the EXIT with it!","To collect the KEY you need a new line of code! For that press Enter after clicking on your first codefield!","Now write: \"lancelot.collect();\". After that we will need to move our Knight towards the EXIT by calling his 'move()' method. Can you guess how?\nNote: If you didn't call your Knight lancelot, you will have to replace the name!","To move your Knight write: \"lancelot.move();\"","The last thing you need to do now is open the EXIT. For that you need yet another line where you write: \"lancelot.useItem();\"\nThis will use the collected KEY and open the EXIT!"],"map":[["wall","wall","wall"],["wall","exit","wall"],["wall",{"item":"key","content":"path"},"wall"],["wall","spawn","wall"],["wall","wall","wall"]],"locToStars":[5,4],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"turnsToStars":[15,13],"reruns":1,"name":"Turn Right To Win","id":1,"tutorialEntries":["Great! That was your first step towards freedom! Check the spellbook to see what you have unlocked! Also hover your mouse over the colored text for more details.","Also note that your solution for any level will always be rated at the end. 3 things are important here: How many Knights did you create, how many turns did they need and how many lines of code did you write.","Always try to use as few Knights as possible!\nThis rating is only there for you to see, if there is a shorter way to solve that level!","Now in order to make your knight face a different DIRECTION at the start, you can pass a DIRECTION as a Parameter to its Constructor:\nKnight lancelot = new Knight(EAST);","Actually if you don't want to write as much code, you're better off simply naming your Knight k. You can rename your Knight by clicking on the Codefield where you declared him and pressing Ctrl-R.","Now there's a few more things your Knights can do than just walking straight and opening doors!","They can also turn towards a different direction and use shovels in order to remove some dirt that is blocking their way.","To do this you must first \"collect()\" the shovel, then call the method \"turn(RIGHT)\" and finally \"useItem()\" to remove the blockage.\nOther options for turn are LEFT or AROUND which you may find in your Spellbook after you have completed the level!","Okay so how do you get around this key with a shovel in your hand? Well in order to do that we must first drop the shovel via \"dropItem()\". Note that the Knight can only drop an Item, if he faces an empty cell!","Note that you can use the shortcut Alt-Arrow Up or Alt-Arrow Down to move codefields, if you have written them in the wrong order!\nThis will only work if it doesnt produce an error though!"],"map":[["wall","wall","wall","wall","wall"],["wall","spawn","path",{"item":"shovel","content":"path"},"wall"],["wall","wall","wall","dirt","wall"],["empty","empty","wall",{"item":"key","content":"path"},"wall"],["empty","empty","wall","exit","wall"],["empty","empty","wall","wall","wall"]],"locToStars":[15,13],"turns":-1},{"loc":-1,"knights":0,"maxKnights":2,"code":[],"turnsToStars":[13,11],"reruns":1,"name":"Identical Twin","id":2,"tutorialEntries":["Another thing you can do is control multiple Knights sequentially. You will even learn how to control them both simultaneously later.","To do that, we must first create a new Knight and move him away from the spawn. Then we can create another Knight just like before, except that he needs a different name. If they had the same name, how could we distinguish them from each other?","To delete your old code either use your backspace or delete key after clicking on the codefield you want to delete or press the \"Clear Code\" button!","Next to the \"Clear Code\" button is the \"Load Best Code\" button. You might have already wondered about its purpose.\nWhenever you replay a Level you have solved before, clicking this button will load the best solution that you have found!","You could also try and see what happens if you reassign your Knight by writing the following:\nk = new Knight();\nAssuming you named your Knight k.","When you have done as described, we come to our next mechanic. See the pressure plate with the red border? Step on it with your first Knight and you will be able to walk through the gate with the other.","Better dont let the first one leave the PRESSURE PLATE while the other one stands in the GATE. At least one of the Knights would not appreciate that."],"map":[["empty","wall","wall","wall","wall","wall"],["wall","wall",{"id":1,"content":"pressure_plate"},"wall","exit","wall"],["wall","spawn","path",{"linkedIds":[1],"content":"gate"},{"item":"key","content":"path"},"wall"],["wall","wall","wall","wall","wall","wall"]],"locToStars":[13,11],"turns":-1},{"loc":-1,"knights":0,"maxKnights":2,"code":[],"turnsToStars":[24,22],"reruns":1,"name":"Learn The Ropes","id":3,"tutorialEntries":["Here's another thing: Knights are not the only things that can activate PRESSURE_PLATEs. BOULDERs can also achieve that. \"collect()\" them and use \"dropItem()\" to activate the plate. Note that other items are not heavy enough to do the same!","To inspect what the PRESSURE_PLATEs do, you can hover your cursor over the GATE for a short time. The message that pops up will also contain this information: \"Linked Cell Ids: 1,0\".\nThis means that opening the GATE requires  PRESSURE_PLATEs with Id 1 and Id 0 to trigger.","By hovering your cursor over the PRESSURE_PLATEs you can see that one of them has Id 1 and the other has Id 0.","Remember that you can use Alt-Up and Alt-Down to move your current line of code. This will only work if the code is still correct after doing so!\nNote: Check your spellbook for all possible shortcuts!","When a Knight uses \"dropItem()\" while looking at another Knight facing in the opposite direction and not carrying an Item of their own, the first one passes their Item to the second one.","Using \"collect()\" while carrying an Item, will swap your carried Item with the one in front of you!\nTry to use only 2 Knights to solve this puzzle!\nOnly read the next message if you need help!","First spawn a Knight that is looking EAST and make him \"move()\" and \"turn(RIGHT)\". Then spawn another one looking SOUTH, collecting the SHOVEL then moving and turning towards the DIRT.","Remove the DIRT with the SHOVEL then move and turn and pass it to the other Knight. This other Knight should then collect the BOULDER and pass it to the first Knight. He should now place it on top of the lower PRESSURE_PLATE and collect the KEY!"],"map":[["wall","wall","wall","wall","wall","empty"],["wall","spawn",{"id":1,"content":"pressure_plate"},{"item":"boulder","content":"path"},"wall","empty"],["wall",{"item":"shovel","content":"path"},"dirt","wall","wall","wall"],["wall",{"item":"key","id":0,"content":"pressure_plate"},"path",{"linkedIds":[1,0],"content":"gate"},{"linkedIds":[1],"content":"exit"},"wall"],["wall","wall","wall","wall","wall","wall"]],"locToStars":[24,22],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["Skeleton skelly = new Skeleton(WEST);","skelly.move();","skelly.move();","skelly.attack();","skelly.move();","skelly.attack();","skelly.move();","skelly.turn(LEFT);","skelly.attack();"],"turns":-1,"turnsToStars":[15,13],"reruns":1,"name":"Opposition","id":4,"tutorialEntries":["Sadly you are not the only one capable of using Java! An evil force is controlling Skeletons to hinder you from reaching the EXIT! To your left you can see how they are instructed.","Note that their \"attack()\" method is exclusive to them. If you think that this is unfair, be aware that they cannot use items!","First clear the code from the previous Level by pressing the \"Clear Code\" Button.\nNow protect the KEY and yourself from your enemy.\nCan you figure out what to do by yourself? Then you don't need to read further...","Collect the KEY, then turn and collect the SWORD, turn back and kill the Skeleton with \"useItem()\". Knights strike before Skeletons do!"],"map":[["wall","wall","wall","wall","wall","wall","wall"],["wall","spawn",{"item":"key","content":"path"},"path","path","enemy_spawn","wall"],["wall",{"item":"sword","content":"path"},"wall","exit","wall","wall","wall"],["wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[15,13]}]},{"difficulty":0,"name":"Conditions 02","needsPrevCourse":true,"levels":[{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["int i = randInt(1,2);","Skeleton skelly = new Skeleton(EAST,i);"],"turns":-1,"turnsToStars":[10,9],"reruns":2,"name":"Fork In The Road","id":5,"tutorialEntries":["You have now mastered the Basics!\nAnother thing you will need upon your way to become a master of Java are \"Conditional Statements\". These consist of the following magical formulas:","if ( <condition> ) {\n\t<consequent>\n}\nelse {\n\t<alternative>\n}","Note that the '<' and '>' characters are never part of the code! Instead they symbolize a placeholder for what you are supposed to write here!","A <condition> is something that is either true or false. You can actually enter \"true\" or \"false\" (without the \"\") to test what happens. For our purposes we want to test, whether a cell contains a Skeleton or not.","To do this write:\n\"if(<knight name>.targetsEntity(SKELETON)) {\"\nand then press Enter.\nA '}' will be added automatically!","If you haven't found out already: the Skeleton will appear at a random spawn point. The statement \"int i\" declares a new Variable that has a whole number as value.\n\"= randInt(1,2);\" means the value will be a whole number between 1 and 2.","Therefore the resulting value of \"i\" will either be 1 or 2.\n1 will spawn the Skeleton at the upper spawn, 2 will spawn it at the lower one.\nTo ensure you dont rely on luck this Level will be executed twice with different values of i!","Inside the if-Statement you should now specify what the Knight should do in case there is a Skeleton ahead.\nAfter that you can specify what it should do, if there is no Skeleton ahead...","To do that write below the '}' of the if-Statement (create a new Codefield by pressing enter after selecting the '}'):\nelse {","When you are done if the else part you can test your code. Be reminded that every thing you learn here is automatically added to your spellbook!\nFor more help read further...","First \"collect()\" the KEY, \"move()\" twice and \"turn(LEFT)\". If you look at a Skeleton you will need to \"turn(AROUND)\", \"move()\" and \"turn(LEFT)\". Else you will want to move and \"turn(RIGHT)\". After the else you will want to \"move()\" and \"useItem()\"."],"map":[["empty","empty","wall","wall","wall","wall","wall"],["wall","wall","wall",{"id":1,"content":"enemy_spawn"},"path","exit","wall"],["wall","spawn",{"item":"key","content":"path"},"path","wall","wall","wall"],["wall","wall","wall",{"id":2,"content":"enemy_spawn"},"path","exit","wall"],["empty","empty","wall","wall","wall","wall","wall"]],"locToStars":[16,14]},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["int i = randInt(1,3);","Skeleton skelly = new Skeleton(SOUTH);","if (i == 1) {","skelly.turn(RIGHT);","skelly.collect();","}","else if (i == 2) {","skelly.collect();","}","else {","skelly.collect();","skelly.turn(RIGHT);","skelly.collect();","}"],"turns":-1,"turnsToStars":[15,12],"reruns":3,"name":"Indecisive Skeleton","id":24,"tutorialEntries":["If we want to differentiate between more than 2 condition, we can use the following syntax:","if ( <condition1> ) {\n}\nelse if (<condition2>) {\n}\nelse {\n}","We can even use as many \"else if\" statements as we want.\nIn this level we need to differentiate between 3 different behaviours. Do you already know what the skeleton will do (depending on the value of i)?","To check whether there is an item infront a Knight lancelot, write:\nlancelot.targetsItem()\ninside a Conditional Statement.\nTo check for a specific item (KEY, SWORD,...)\nwrite: lancelot.targetsItem(<item>)","Note that the Skeleton will drop any Item it is holding on death!\nTry and solve this puzzle now. Look at the enemy code and the previous tips for help.\nIf you can't solve it, read the next messages.","At first we move a Knight in a way that he faces the cell with the SWORD.\nThen we want to check what items is there since the Skeleton might take the SWORD.\nTo see if the item is a KEY write:\nif(lancelot.targetsItem(KEY)) {","If there is a KEY we want to collect it and then move downwards twice.\nAfter the \"if\" write:\nelse if (lancelot.targetsItem(SWORD)){\nto see if there is a SWORD. In this case you will want to kill the Skeleton and then take its KEY.","After that move in a way that you face downwards in the lowest row.\nThen we want to write\nelse {\nIn case there is neither a SWORD nor a KEY. In this case the KEY is below the SKELETON","Move down there and collect the KEY and turn to face downwards again afterwards.\nIf you did everything correctly, your Knight should now always be in the lowest row, looking downwards.","The last thing you need to do is to create code after the \"else\" statement that makes your Knight turn RIGHT, move to the EXIT and open it!"],"map":[["wall","wall","wall","wall","wall","empty"],["wall","spawn","path","path","wall","wall"],["wall","wall","wall",{"item":"sword","content":"path"},"enemy_spawn","wall"],["wall","exit","path","path",{"item":"key","content":"path"},"wall"],["wall","wall","wall","wall","wall","wall"]],"locToStars":[30,28]}]},{"difficulty":0,"name":"Loops 03","needsPrevCourse":true,"levels":[{"loc":-1,"knights":0,"maxKnights":1,"code":[],"turnsToStars":[68,66],"reruns":1,"name":"Spiral In","id":6,"tutorialEntries":["Great! Besides conditions there is another important tool, that will help to reduce the amount of code you have to write significantly:\n\"Loop Statements\"!","Similar to \"Conditional Statements\" they also ask for a <condition>, but they don't differentiate between different courses of action and will run as long as the <condition> is met instead.","Our first type of \"Loop Statement\" is the while-Statement:\nwhile(<condition>) {\n\t<consequent>\n}\n","We want to repeat the Knights actions until he reaches the EXIT! For that write:\n\twhile(!lancelot.targetsCell(EXIT)) {\nPay attention to the \"!\" infront of \"lancelot.targetsCell(EXIT)\". It means the opposite of whatever comes after it!","This means that the code inside the \"while\" loop will be repeated until the Knight is targeting the EXIT. Inside the \"while\" loop you can now enter a new \"if\" Statement.","It should check the following condition:\n<knight name>.canMove()\nThis is wrong if he stands before a WALL!\nCan you already solve this puzzle? Note: Replace <knight name> with the name of your Knight!","Inside your while-Statement you need this:\n\tif (<knight name>.canMove()){\n\t\t<knight name>.move();\n\t}","else {\n\t<knight name>.turn(RIGHT);\n}\nAnd as the very last Statement, outside of the while loop:\n<knight name>.useItem();"],"map":[["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","spawn",{"item":"key","content":"path"},"path","path","path","path","path","path","path","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["empty","empty","wall","path","path","path","path","path","path","path","wall","path","wall"],["empty","empty","wall","path","wall","wall","wall","wall","wall","path","wall","path","wall"],["empty","empty","wall","path","wall","path","path","path","wall","path","wall","path","wall"],["empty","empty","wall","path","wall","path","wall","exit","wall","path","wall","path","wall"],["empty","empty","wall","path","wall","path","wall","wall","wall","path","wall","path","wall"],["empty","empty","wall","path","wall","path","path","path","path","path","wall","path","wall"],["empty","empty","wall","path","wall","wall","wall","wall","wall","wall","wall","path","wall"],["empty","empty","wall","path","path","path","path","path","path","path","path","path","wall"],["empty","empty","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[11,9],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"turnsToStars":[40,36],"reruns":1,"name":"Spiral Free","id":7,"tutorialEntries":["Do not despair, if you didn't get 3 Stars again!\nWith what you will learn now you can solve the last level with less code!","Sometimes a better alternative to a while-Loop is a for-Loop. This is the case when we know exactly how many steps we want to take! The syntax is as follows:","for (int i = 0; i < number of steps; i++) {\n\t<consequent>\n}\nFor our purposes we need multiple for-Loops in succession:\nfor(int i = 0; i < 9; i++) {","So what does this for(...) part mean? First we define an integer Variable with the name i and then we say we want to repeat the code after the '{' as long as i < 9 is true. Also we want to add 1 to i, every time the code was repeated (i++).","You can also press F5 or click on the Knight-Icon above your code in order to deactivate the compiler. You can then adjust the code even if there are currently errors!\nIf you still need more help read further to see what code you will need....","for (int i = 0; i < 9; i++){\n\t<knight name>.move();\n}\n<knight name>.turn(RIGHT);\n<knight name>.collect();","for (int i = 0; i < 10; i++){\n\t<knight name>.move();\n}\n..."],"map":[["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path","path","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path","path","wall"],["wall","path","path","path","wall","wall","wall","wall","wall","wall","path","wall","path","wall"],["wall","path","path","path","wall","empty","empty","empty","empty","wall","path","wall","path","wall"],["wall","path","path","path","wall","empty","empty","empty","empty","wall","path","wall","path","wall"],["wall","path","wall","path","wall","empty","empty","empty","empty","wall","path","wall","path","wall"],["wall","path","wall","path","wall","empty","empty","empty","empty","wall","exit","wall","path","wall"],["wall","path","wall","path","wall","empty","empty","empty","empty","wall","wall","wall","path","wall"],["wall","path","wall","path","wall","empty","empty","empty","empty","wall","path","path","path","wall"],["wall","path","wall","path","wall","wall","wall","wall","wall","wall","path","path","path","wall"],["wall","path","path",{"item":"key","content":"path"},"path","path","path","path","path","path","path","path","path","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path","spawn","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[18,15],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"turnsToStars":[50,47],"reruns":1,"name":"Unexpected Turn","id":8,"tutorialEntries":["If you didnt get 3 Stars: The best solution is a bit tricky and requires you to insert one for-Loop into another for-Loop. But don't worry, you don't always have to get 3 Stars!","But for loops aren't always the fastest way to solve a problem! Sometimes we don't care about how often exactly we want something to happen but only under what circumstances it is supposed to happen!","For example in this particular Level we want to move our Knight through the labyrinth for as long as they don't see a KEY in front of them!","For that we write:\n\"while(!<knight name>.targetsItem(KEY)) {\"\nReminder: !condition is always the opposite of the condition","Just as with the first while loop, we will need a condition like this:\n\"if(<knight name>.canMove()) {\"\nBut this time something is different! Try and see what happens , if you let your Knight turn left every time he can't move...","To help us with this problem, we will need to declare an \"int\" Variable to help us count how often our Knight has already turned! You can think of \"int\" as a whole number.","Now create a new line above your while Loop and write:\n\"int turns = 0;\"\nEvery time your Knight turns, we want to increase this number, by typing:\n\"turns++;\" or \"turns = turns + 1;\"","We can now decide that as long as \"turns < 3\" we want to turn left, else we want to turn right. The best way to do this is to declare yet another Variable below turns:\n\"TurnDirection direction = LEFT;\"\nAnd call: \"<knight name>.turn(direction);\"","You should call this in an else Statement below the if-Statement and also increase turns like this:\nturns = turns+1;\nor\nturns++;","As soon as turns reaches 3, we can change the value of direction by writing:\n\"direction = RIGHT;\"\ninside of another if-Statement below the else-Statement but still inside the while-Loop.","There are multiple ways to check whether turns has reached 3:\n- turns == 3 (a single \"=\" would change the value of turns to 3)\n- turns >= 3 (which is true if turns is 3 or greater)","- turns > 2 (which is true if turns is greater than 2)","Now to solve the Level we need some more code outside of your while Loop! Just select the last \"}\" and press ENTER in order to add the required spells!\nAlso don't forget to check your spellbook for new entries after you completed this level!"],"map":[["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","path","wall","path","path","path","wall"],["wall","path","wall","wall","path","wall","path","wall","path","wall"],["wall","path","wall","exit","path","wall","path","wall","path","wall"],["wall","path","wall","wall",{"item":"key","content":"path"},"wall","path","wall","path","wall"],["wall","path","wall","wall","wall","wall","path","wall","path","wall"],["wall","path","path","path","path","path","path","wall","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","spawn","path","path","path","path","path","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[22,18],"turns":-1},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["Skeleton sk = new Skeleton(EAST);","while(true) {","if (sk.canMove()) {","sk.move();","sk.wait();","sk.wait();","sk.wait();","}","else {","sk.turn(AROUND);","}","}"],"turns":-1,"turnsToStars":[74,71],"reruns":1,"name":"Unexpected Traps","id":9,"tutorialEntries":["Now things are getting dangerous! The room is suddenly full of traps!\nThere is a window of exactly one turn, where you can safely walk over them. You will have to wait until the right moment to survive this!","You can keep your code from the last level. But you will have to make some adjustments. In order to find the right moment we will need the method \"targetsDanger()\" which will be false unless there is a trap in front of you that will kill you when you walk on it.","So as long as this method is true the Knight should just wait:\nif(<knight name>.targetsDanger()){\n\t<knight name>.wait();\n}","Another thing Knights can do, is to take a step backwards. This will be needed in this level, as you can only walk safely across the TRAP, if the GATE behind it is open. Luckily you have a Skeleton \"friend\" down there, opening them up from time to time.","So if you put a Conditional Statement asking if the Knight is looking at a GATE (lancelot.targetsCell(GATE)) in the right place and telling your Knight to \"backOff()\", you will already have solved this puzzle!","If you're having trouble: The if-statement asking whether the knight's target is a Danger should be first. The old if-Statement asking whether the Knight can move should now be an \"else if-statement\" and after that you should put the \"else if\" containing the backOff!"],"map":[["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","path","wall","path","trap","path","wall"],["wall","path","wall","wall","path","wall","path","wall","path","wall"],["wall",{"linkedIds":[3],"flags":["turned"],"content":"gate"},"wall","exit","path","wall","trap","wall","path","wall"],["wall","trap","wall","wall",{"item":"key","content":"path"},"wall",{"linkedIds":[1],"flags":["turned"],"content":"gate"},"wall","path","wall"],["wall","path","wall","wall","wall","wall","path","wall","trap","wall"],["wall","path","path",{"linkedIds":[2],"content":"gate"},"trap","path","path","wall","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","spawn","path","path","path","trap","path","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["empty","wall","enemy_spawn","path",{"id":1,"content":"pressure_plate"},{"id":2,"content":"pressure_plate"},{"id":3,"content":"pressure_plate"},"path","wall","empty"],["empty","wall","wall","wall","wall","wall","wall","wall","wall","empty"]],"locToStars":[26,24]},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["Skeleton skelly = new Skeleton(SOUTH);","boolean hasTurned = false;","for(int i = 0;i < 7;i = i + 1) {","skelly.move();","}","skelly.turn(LEFT);","skelly.move();","if (skelly.targetsEntity()) {","skelly.attack();","}","skelly.move();","skelly.turn(LEFT);","while(skelly.isAlive()) {","if (skelly.targetsDanger()) {","skelly.wait();","}","else if (skelly.canMove()) {","skelly.move();","hasTurned = false;","}","else if (skelly.targetsItem() || (skelly.targetsEntity())) {","skelly.attack();","}","else if (!hasTurned) {","skelly.turn(RIGHT);","hasTurned = true;","}","else {","skelly.turn(AROUND);","}","}"],"turns":-1,"turnsToStars":[95,93],"reruns":1,"name":"Fast And Furious","id":10,"tutorialEntries":["Now this is a real challenge! We need to combine most of what we have learned so far and even go a step beyond! First look at the script of your enemy and try to understand, how it works.","Just like in the last level, there are a lot of TRAPs involved. In order to beat this level you will have to write a script that navigates your Knight faster through this maze than the Skeleton is doing it!","You can use big parts of the last script!\nIf you already know how to solve the level, you can test your idea and don't need to see my next messages...","We always have to turn immediately in the right direction! To achieve this we can use an integer variable that counts how many times we have turned just like before!","To test whether our variable is smaller or larger than a number we need boolean operators! There are three:\n- a || b means both or one of a or b are true\n- a && b means both a and b are true\n- !a means a is wrong","We can combine them using '(' and ')':\nboolean Test = !(a && b) || c ;\nTest will be true if not both a and b are true or if c is true","If you have trouble remembering that, hover your mouse over the <condition>s in your spellbook! If you can't solve it yourself, I'll tell you the solution in the next message...","Where our enemy wrote:\n\"else if (!hasTurned) {\"\nWe want to write:\n\"else if (turns < 4 || (turns > 6 && turns <9)) {\"\nAnd instead of turning AROUND in the else part we want to turn LEFT!","Also we need to make sure that whenever we call turn(RIGHT) and turn(LEFT) inside our while loop, we increase our integer via: <var name>++;\nYou should not count the first time you turned right after the for loop!"],"map":[["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","enemy_spawn","wall","path","path","path","path","path","path","trap","path","path","trap","path","wall"],["wall","path","wall","path","wall","wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","path","wall","path","path","path","path","path","wall","path","trap","path","wall",{"flags":["armed"],"content":"trap"},"wall"],["wall","path","wall","path","path","path","path","path","wall","path","wall","path","path","path","wall"],["wall","path","wall","path","path","path","path","path","wall","path","wall","wall","wall","wall","wall"],["wall","path","wall","path","path","path","path","path","wall","path","trap","path",{"flags":["preparing"],"content":"trap"},"path","wall"],["wall","path","wall","path","path","path","path","path","wall","wall","wall","wall","wall","path","wall"],["wall","path","path","path","path","path","path","path","path","path","path","spawn","wall",{"item":"key","content":"path"},"wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","path","wall"],["wall","path","path",{"flags":["preparing"],"content":"trap"},"path","trap","path","path","path",{"flags":["preparing"],"content":"trap"},"path","path","trap","path","wall"],["wall","trap","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","trap","path","path","path","path","trap","path","path","path","path","exit","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[28,26]},{"loc":-1,"knights":0,"maxKnights":2,"code":[],"ai":["int i = randInt(0,2);","Skeleton skelly = new Skeleton(NORTH,i);","skelly.move();","while(true) {","if (skelly.targetsEntity() || (skelly.targetsItem())) {","skelly.attack();","}","else {","skelly.wait();","}","}"],"turns":-1,"turnsToStars":[26,24],"reruns":3,"name":"Minesweeper","id":22,"tutorialEntries":["Sometimes we can also combine for and while loops in a meaningful way. Can you already see what the enemy script does in this level?","A Skeleton will spawn randomly at one of those 3 ENEMY_SPAWNs. It will then take a step forward, opening the corresponding gate. With the Method \"isAlive()\" you can test, whether a Knight is still alive. Can you already solve this puzzle?","First you should spawn a Knight and make him drop the KEY on top of the SPAWN so the next Knight can pick it up easily. Then you should let him move for as long as he is alive with a while-Loop. Also you should count the steps he is taking.","For that declare a new variable: \"int steps = 0;\" above the while-Loop. Don't put it inside or else it will reset everytime! Inside the while-Loop you will want to increase the Variable: \"steps = steps + 1;\"","Then you can spawn a second Knight outside of the while-Loop. He should now take as many steps as the first Knight took (the first step of the first Knight was not counted).\nYou can do this with the help of a for-Loop:","for(int i = 0;i < steps; i++) {\n<second knight name>.move();\n}","Try the code and see where the second Knight ends up. You can then add the missing statements after the for-Loop..."],"map":[["wall","wall","wall","wall","wall","wall","wall","wall","empty","empty","empty","empty"],["wall","wall","exit","wall","exit","wall","exit","wall","empty","empty","empty","empty"],["wall","wall",{"linkedIds":[4],"flags":["turned"],"content":"gate"},"wall",{"linkedIds":[3],"flags":["turned"],"content":"gate"},"wall",{"linkedIds":[5],"flags":["turned"],"content":"gate"},"wall","empty","empty","empty","empty"],["wall","wall",{"id":6,"content":"pressure_plate"},"wall",{"id":7,"content":"pressure_plate"},"wall",{"id":8,"content":"pressure_plate"},"wall","empty","empty","empty","empty"],["wall","wall",{"linkedIds":[6],"flags":["inverted","turned"],"content":"gate"},"wall",{"linkedIds":[7],"flags":["inverted","turned"],"content":"gate"},"wall",{"linkedIds":[8],"flags":["inverted","turned"],"content":"gate"},"wall","wall","wall","wall","wall"],["wall","path","path","path","path","path","path","path","path",{"item":"key","content":"path"},"spawn","wall"],["wall",{"id":4,"content":"pressure_plate"},"wall",{"id":3,"content":"pressure_plate"},"wall",{"id":5,"content":"pressure_plate"},"wall","wall","wall","wall","wall","wall"],["wall",{"id":2,"content":"enemy_spawn"},"wall",{"id":1,"content":"enemy_spawn"},"wall",{"id":0,"content":"enemy_spawn"},"wall","empty","empty","empty","empty","empty"],["wall","wall","wall","wall","wall","wall","wall","empty","empty","empty","empty","empty"]],"locToStars":[24,20]}]},{"difficulty":1,"name":"Inheritance 04","needsPrevCourse":true,"levels":[{"loc":-1,"knights":0,"maxKnights":2,"code":[],"ai":["Skeleton skelly = new Skeleton(SOUTH);","skelly.move();","skelly.turn(LEFT);","for(int i = 0;i < 3;i = i + 1) {","if (skelly.targetsEntity()) {","skelly.attack();","}","else {","skelly.move();","}","}","while(skelly.isAlive()) {","if (skelly.targetsEntity()) {","skelly.attack();","}","skelly.wait();","}"],"turns":-1,"turnsToStars":[22,20],"reruns":1,"name":"Reinforcements","id":29,"tutorialEntries":["Now that you already know everything a Knight can do, have a look at a new type of Knight: The Guardian.\nThe Guardian IS A Knight and therefore has access to the same methods.","The only difference is that a Guardian always carries a shield and cannot collect other items. The shield protects the guardian from frontal damage and may also be used to push items and entities. If these are pushed against something they will even be killed!","To summon a Guardian simply write:\nKnight arthur = new Guardian(WEST);\n\nCan you already solve this puzzle?","You need to take the KEY with a normal Knight first and then the Guardian can push the Skeleton away and close the gap until the EXIT is clear!"],"map":[["wall","wall","wall","wall","wall","wall","wall","wall"],["wall","enemy_spawn","wall","exit","wall","path","wall","wall"],["wall","path","path","path","path",{"item":"key","content":"path"},"spawn","wall"],["wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[20,18]},{"loc":-1,"knights":0,"maxKnights":1,"code":[],"ai":["Skeleton ghosty = new Ghost(NORTH);","while(true) {","while(!(ghosty.targetsEntity())) {","ghosty.wait();","}","ghosty.attack();","ghosty.turn(AROUND);","ghosty.move();","ghosty.move();","ghosty.turn(AROUND);","ghosty.dispossess();","ghosty.move();","ghosty.turn(RIGHT);","ghosty.backOff();","}"],"turns":-1,"turnsToStars":[16,14],"reruns":1,"name":"Occult Powers","id":28,"tutorialEntries":["If you thought Skeletons were bad enough, here is another type of enemy: The Ghost.\nUnlike the Skeleton it is not out to kill you, but to annoy you endlessly. Like the Guardian it is a Subtype and has every Method of the Skeleton!","Unlike every other Entity, the Ghost is immune to damage. That means you will need to outsmart it instead of trying to kill it!","Instead of attacking, it will possess your Knight and force it to do whatever it wants until it gets bored and dispossesses you.\nWith \"lancelot.isPossessed()\" you can check whether your Knight is currently possessed.","This means that the Ghost has an additional Method depossess() that the Skeleton does not have and the attack() Method has been overwritten. Note that the Guardian is not safe behind its shield.\nCan you already solve it?","You need to walk backwards until you are infront of the Ghost:\nlancelot.backOff();\nand then \"wait()\" while your Knight is possessed. Afterwards you need to \"turn(AROUND)\" and the rest should be easy..."],"map":[["wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","path","path","spawn","wall"],["wall",{"item":"key","content":"path"},"wall","wall","enemy_spawn","wall","wall","wall"],["wall","exit","wall","wall","wall","wall","wall","wall"],["wall","wall","wall","empty","empty","empty","empty","empty"]],"locToStars":[14,12]},{"loc":-1,"knights":0,"maxKnights":2,"code":[],"ai":["Skeleton skelly = new Skeleton(SOUTH,0);","Skeleton ghosty = new Ghost(NORTH,1);","Skeleton skelvin = new Skeleton(EAST,2);","while(true) {","if (ghosty.targetsEntity()) {","ghosty.attack();","skelvin.move();","}","else if (ghosty.canMove()) {","ghosty.move();","}","else if (ghosty.targetsCell(EXIT)) {","ghosty.useItem();","}","else {","ghosty.turn(RIGHT);","}","}"],"turns":-1,"turnsToStars":[44,41],"reruns":1,"name":"Help From Beyond","id":30,"tutorialEntries":["Try to inspect the Map by hovering over the Cells and find out, which PRESSURE PLATE opens which GATE. You also need to determine the IDs of the SPAWNs.","Again you will have to use the Ghost in order to reach the EXIT! With the Method \n<knight name>.targetIsLooking(<direction>)\nyou can check whether your target is looking in a given DIRECTION.\nCan you already solve the puzzle?","Tip 1: You will need 1 Guardian and 1 Knight","Tip 2: The Guardian can push the KEY and a spawning Knight will then collect it. He can also kill the upper Skeleton with useItem()","Tip 3: The other Knight will need to stand in the correct spot when getting possessed. Look at the enemy's script and the Map to determine it. Also you can use the Method: targetIsLooking() to await the correct moment to make a run for the correct position!","Tip 4:\nAfter standing in the open gate you can write the following:\nwhile(!k.targetIsLooking(SOUTH)) {\nk.wait();\n}","You will also need to \"wait()\" one more turn and then move up to the highest GATE. The rest will be done by the Ghost..."],"map":[["wall","wall","wall","wall","empty","empty","wall","wall","wall","wall","wall","wall"],["wall",{"id":3,"content":"pressure_plate"},{"id":0,"content":"enemy_spawn"},"wall","wall","wall","wall","path","wall",{"id":2,"content":"enemy_spawn"},{"id":4,"content":"pressure_plate"},"wall"],["wall","wall","path","wall","wall","path",{"linkedIds":[4],"content":"gate"},"path","path","wall","wall","wall"],["exit",{"linkedIds":[4],"content":"gate"},{"id":6,"content":"spawn"},"path",{"linkedIds":[3],"content":"gate"},"path",{"linkedIds":[4],"content":"gate"},"path","path","path","path","wall"],["wall","wall",{"item":"key","content":"path"},"wall","wall","path",{"linkedIds":[4],"content":"gate"},"path","wall","path","path","wall"],["wall","wall",{"id":5,"content":"spawn"},"wall","wall",{"id":1,"content":"enemy_spawn"},"wall","path","wall","path","path","wall"],["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"]],"locToStars":[24,20]}]},{"difficulty":1,"name":"Finale 05","needsPrevCourse":true,"levels":[{"loc":-1,"knights":0,"maxKnights":5,"code":[],"ai":["Skeleton skelly = new Skeleton(EAST,3);","Skeleton skelvin = new Skeleton(EAST,2);","Skeleton skeletor = new Skeleton(EAST,1);","Army skellies = new Army(skelly,skelvin,skeletor);","while(true) {","if (skellies.canMove()) {","skellies.move();","}","else if (!(skellies.targetsEntity(NONE))) {","skellies.attack();","}","else {","skellies.turn(AROUND);","}","}"],"turns":-1,"turnsToStars":[44,40],"reruns":1,"name":"The Hallway","id":27,"tutorialEntries":["There are 2 more things you can do, but have not done yet. First like the Skeletons you can specify a SPAWN, using its ID. Hover your mouse above the SPAWNs to find it. Secondly you can control more than just one Knight at a time!","To do that you will need to spawn your Knights first and then create a new Army, including them. Look at what your Enemy did in their script. Can you already solve the puzzle?","If you're having trouble here is some further tips:\nFirst create 3 Knights (k1,k2 and k3) at 3 different Spawns. Then add them to an Army like this:\nArmy knights = new Army(k1,k2,k3);","To solve this puzzle, there are numerous possibilities. Here is a possible solution:\nStart with a for statement, that loops 3 times (thats the amount of enemies).  Now create a while loop that makes the Knights wait until the Knight on the right sees a Skeleton:","while(!(k3.targetsEntity())) {\n\tknights.wait();\n}\nAnd after that make all of them wait once and move twice.\nTry this out and see what happens.","There should occur a problem as the Skeleton must look in the right DIRECTION for this to work. To check that we want to create a new boolean above the while loop:\nboolean looksEast = false;","Now we change the while loop:\nwhile(!(k.targetsEntity()&&looksEast)){\nknights.wait();\nlooksEast = k3.targetIsLooking(EAST);\n}\nThis will always update the boolean and ...","check whether the Skeleton is not only in front of the 3rd Knight but also looks EAST.\nNote that you cannot just write:\nboolean looksEast = k3.targetIsLooking(EAST);\nbecause this will not update its value inside of the loop!","Lastly you can take control of the individual Knights again to finish the Level!\nLook at the PRESSURE_PLATEs IDs to find out what they do..."],"map":[["wall","wall","wall","wall","wall","wall","wall","empty"],["wall","pressure_plate","wall","exit","wall",{"id":8,"content":"pressure_plate"},"wall","empty"],["wall",{"id":7,"content":"pressure_plate"},"wall",{"item":"key","content":"path"},"wall","pressure_plate","wall","empty"],["wall",{"id":9,"content":"pressure_plate"},"wall",{"linkedIds":[7,8],"flags":["turned"],"content":"gate"},"wall","pressure_plate","wall","wall"],["wall",{"id":1,"content":"enemy_spawn"},"path","path",{"linkedIds":[9],"flags":["inverted"],"content":"gate"},"path","path","wall"],["wall","path","wall","path","wall","path","wall","wall"],["wall",{"id":2,"content":"enemy_spawn"},"path","path","path","path","path","wall"],["wall","path","wall","path","wall","path","wall","wall"],["wall",{"id":3,"content":"enemy_spawn"},"path","path","path","path","path","wall"],["wall","path","wall","path","wall","path","wall","wall"],["wall",{"id":4,"content":"spawn"},"wall",{"id":5,"content":"spawn"},"wall",{"id":6,"content":"spawn"},"wall","empty"],["wall","wall","wall","wall","wall","wall","wall","empty"]],"locToStars":[23,21]},{"loc":-1,"knights":0,"maxKnights":5,"code":[],"ai":["int r1 = randInt(0,1);","Direction d = EAST;","if (r1 == 2) {","d = WEST;","}","Skeleton ghosty = new Ghost(d,r1 + 1);","Skeleton skelly = new Skeleton(SOUTH,0);","for(int i = 0;i < 2;i = i + 1) {","while(ghosty.isAlive()) {","if (ghosty.canMove()) {","ghosty.move();","}","else if (ghosty.targetsEntity()) {","ghosty.attack();","ghosty.turn(LEFT);","}","else if (ghosty.targetsDanger()) {","ghosty.wait();","}","else {","ghosty.turn(AROUND);","}","}","Skeleton skelvin = new Skeleton(EAST,3);","skelvin.move();","skelvin.wait();","skelvin.wait();","skelvin.backOff();","ghosty = new Skeleton(EAST,15);","}"],"turns":-1,"turnsToStars":[86,84],"reruns":2,"name":"The Grand Finale","id":31,"tutorialEntries":["Now here it is! The Grand Finale!\nThere is a lot going on!\nDon't despair. Try to figure out, which problem has to be solved first...","You can look at your Enemy's script, but you can also try it out to see what is happening.\nYou will need to declare multiple Armies in order to save a lot of time.\nMost of the time you can move 2 Knights at once. Try to find patterns!","You will have to hover your mouse a lot above the map to find the IDs of the cells.\nNote that it is possible to kill a Ghost. But not in its Ghostform...\nCan you already solve this puzzle?","If you're having trouble here is some further tips:\nFirst you can position the Knights at the SPAWNs with the IDs 8 and 9. You can move them both in the same way!","The Knight at SPAWN 8 should drop its BOULDER on the right side of the TRAP!\nBut before moving either Knight 8 or 9, Knight 8 should wait until the Ghost is before him and looking WEST.","Next you will want to tackle the problem of 6 and 7. 6 will have to be a Guardian who can push the Skeleton into the GATE and the KEY into the upmost row. Both Knights can move with a loop that contains a condition asking whether 6 targets an Entity or an item.","In these cases it should use its shield. After that the Knight that dropped the boulder should move left to the TRAP and getting possessed by the Ghost. It will then die due to the TRAP and BOULDER, triggering another Skeleton to spawn and open the upper GATE.","The Knight at the top should now hurry to enter through the GATE and run for his life as fast as possible. Which is not that fast, because the Knight at 10 will have to open the GATEs at the correct moment. Those 2 can be added into another Army.","At last the Knight with the shovel can move and use the shovel in another Army consisting of it and the Knight with the KEY. If you wait for the correct moment, everything should fall into place perfectly..."],"map":[["wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall","path","path","path","path","path","path","path","path","path","path","path",{"id":7,"content":"spawn"},"wall","wall"],["wall",{"linkedIds":[11],"flags":["turned"],"content":"gate"},"wall",{"linkedIds":[12],"flags":["turned"],"content":"gate"},"wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall"],["wall",{"id":11,"content":"pressure_plate"},"wall",{"id":15,"content":"enemy_spawn"},"path","path",{"linkedIds":[13],"content":"gate"},"path",{"linkedIds":[14],"content":"gate"},"path",{"linkedIds":[17],"content":"gate"},"path",{"linkedIds":[18],"content":"gate"},"path","wall"],["wall","path","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","wall","trap","wall"],["wall","path","wall",{"id":3,"content":"enemy_spawn"},{"id":12,"content":"pressure_plate"},"wall","wall","wall","wall","path","path","path","wall","path","wall"],["wall",{"item":"key","id":0,"content":"enemy_spawn"},"wall","wall","wall","wall","wall","path","path","path","wall","path","wall","trap","wall"],["wall","path","wall","wall",{"id":1,"content":"enemy_spawn"},"path","path","path","trap","path","path",{"id":2,"content":"enemy_spawn"},"wall","path","wall"],["wall","path","wall","wall","wall","wall","wall","wall","wall","wall","wall",{"item":"boulder","id":8,"content":"spawn"},"wall","trap","wall"],["wall","path","wall",{"id":9,"content":"spawn"},"wall","wall",{"id":10,"content":"spawn"},{"id":13,"content":"pressure_plate"},{"id":14,"content":"pressure_plate"},{"id":17,"content":"pressure_plate"},{"id":18,"content":"pressure_plate"},"wall","wall",{"linkedIds":[16],"content":"path"},"wall"],["wall","path","wall","path","wall",{"item":"shovel","content":"path"},"wall","wall","wall","wall","wall","wall","wall",{"linkedIds":[16],"flags":["turned"],"content":"gate"},"wall"],["wall","path","wall","path","wall","path","dirt","path","dirt","path","dirt",{"id":16,"content":"pressure_plate"},"wall","exit","wall"],["wall","path","wall","path","path","path","wall","wall","wall","wall","wall","wall","wall","empty","empty"],["wall",{"id":6,"content":"spawn"},"wall","wall","wall","wall","wall","empty","empty","empty","empty","empty","empty","empty","empty"],["wall","wall","wall","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty"]],"locToStars":[64,59]}]}]}